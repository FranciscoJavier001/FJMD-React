{"version":3,"sources":["types/types.js","reducers/authReducer.js","reducers/calendarReducer.js","reducers/uiReducer.js","reducers/rootReducer.js","store/store.js","hooks/useForm.js","helpers/fetch.js","helpers/prepareEvents.js","actions/events.js","actions/auth.js","components/auth/LoginScreen.js","components/ui/Navbar.js","helpers/calendar-messages-es.js","components/calendar/CalendarEvent.js","actions/ui.js","components/calendar/CalendarModal.js","components/ui/AddNewFab.js","components/ui/DeleteEventFab.js","components/calendar/CalendarScreen.js","router/PublicRoute.js","router/PrivateRoute.js","router/AppRouter.js","CalendarApp.js","index.js"],"names":["types","initialState","checking","events","activeEvent","modalOpen","rootReducer","combineReducers","ui","state","action","type","calendar","payload","map","e","id","filter","auth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","useForm","useState","values","setValues","reset","handleInputChange","target","name","value","baseUrl","process","fetchSinToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchConToken","token","localStorage","getItem","prepareEvents","end","moment","toDate","start","eventAddNew","event","eventClearActiveEvent","eventUpdated","eventDeleted","eventLoaded","checkingFinish","login","user","startLogout","dispatch","clear","logout","LoginScreen","useDispatch","lEmail","lPassword","formLoginValues","handleLoginInputChange","rName","rEmail","rPassword1","rPassword2","formRegisterValues","handleRegisterInputChange","className","onSubmit","email","password","preventDefault","a","resp","json","ok","setItem","Date","getTime","uid","Swal","fire","msg","placeholder","onChange","Navbar","useSelector","onClick","messages","allDay","previous","next","today","month","week","day","agenda","date","time","noEventsInRange","showMore","total","CalendarEvent","title","uiOpenModal","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","now","minutes","seconds","add","nowPlus1","clone","initEvent","notes","CalendarModal","titleValid","setTitleValid","dateStart","setDateStart","dateEnd","setDateEnd","formValues","setFormValues","useEffect","closeModal","isOpen","onRequestClose","style","closeTimeoutMS","overlayClassName","momentStart","momentEnd","isSameOrAfter","trim","length","console","log","getState","evento","_id","eventStartAddNew","minDate","autoComplete","rows","AddNewFab","DeleteEventFab","locale","localizer","momentLocalizer","CalendarScreen","lastView","setLastView","eventos","startAccessor","endAccessor","eventPropGetter","isSelected","backgroundColor","borderRadius","opacity","display","color","onDoubleClickEvent","onSelectEvent","onView","onSelectSlot","selectable","view","components","PublicRoute","isAutenticated","Component","component","rest","props","to","PrivateRoute","AppRouter","exact","path","CalendarApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.faecc177.chunk.js","sourcesContent":["//**_______________________________________________________________________________________________________________________________________________*/\n//** Esto va a estar en los casos */\nexport const types = {\n\n    //** reducers>uiReducer */\n    uiOpenModal: '[ui] Open modal',\n    uiCloseModal: '[ui] Close modal',\n\n    //** Estos types estan definidos en actions>events y de aqui los importamos */\n    eventSetActive: '[event] Set Active', \n    eventLogout: '[event] Logout event', //** Salgo y purgo el initialState */\n\n    eventStartAddNew: '[event] Start add new', //** Agregar un evento nuevo */\n    eventAddNew: '[event] Add new',\n    eventClearActiveEvent: '[event] Clear active event',\n    eventUpdated: '[event] Event updated', //** Accion en base de datos y si responde SI dispararo esta accion */\n    eventDeleted: '[event] Event deleted', //** Accion que elimina el evento de la BD */\n    eventLoaded: '[event] Events loaded',//** Cuando se cargan los eventos */\n\n    //** Voy a definir todos los types que voy a necesitar para la autentificacion */\n    authCheckingFinish:'[auth] Finish checking login state', //** Finalizada la accion confirmo si o no esta autentificado */\n    authStartLogin:'[auth] Start login', //** Comienzo asyncrono para realizar el posteo */\n    authLogin:'[auth] Login', //** Logeado para establecer info del usuario */\n    authStartRegister:'[auth] Start Register', //** Comienzo para Registro de nuevo usuario */\n    authStartTokenRenew:'[auth] Start token renew', //** Nuevo Token */\n    authLogout:'[auth] Logout', //** Ya la mande llamar en actions>auth */\n}","import { types } from \"../types/types\";\n\nconst initialState = { //** initialState es un objeto donde voy a definir un par de cosas */\n    //** Esta define si el usuario esta autentificado, en false se va al login y en true se queda en la pagina del calendario */\n    checking: true, //** Propiedad que en cuanto se cargue va a ser true Redux>State */\n    // uid: null, //** Estos dos solo los voy a tener cuando esten autentificados */\n    // name: null //** Estos dos solo los voy a tener cuando esten autentificados */\n}\n\n//** Ya que tengo el initialState, voy a crear el Reducer */\n//** Exporto la funcion, que recibe el initialState(auth>checking-true/false) y la action que tengo en types>types */\nexport const authReducer = ( state = initialState, action ) => {\n\n    switch ( action.type ) { //** Con el action.type ya tenemos listo el reducer */\n\n        //** Que queremos que haga cuando recibe una accion de authLogin */\n        case types.authLogin: //** En el caso que recibas en authLogin de types>types, pongo checking en false */\n            return { //** Regresame */\n                ...state, //** Un nuevo estado pero como esta */\n                ...action.payload, //** Y el name y el uid */\n                checking: false //** Cambia el checking a false, porque se que ya lo autentifique y lo inicializo en false */\n            }\n\n        case types.authCheckingFinish:\n            return {\n                ...state, //** Retorno el State como este */\n                checking: false //** Cambio el checking a false */\n            }\n\n        case types.authLogout: //** Logout va a caer aqui en el reducer */\n            return { //** Regresa el checking en false */\n                checking: false //** Cambio el checking a false, para saber que el usuario no esta autentificado, borra todo */\n        }\n\n        default:\n            return state; //** Voy a mandar el state con los parametros que tenga */\n    }\n}","//**_______________________________________________________________________________________________________________________________________________*/\nimport { types } from '../types/types';\n\n//** Referencia. Evento del calendario, es un arreglo y dentro tiene objetos */\n// {\n//    id: new Date().getTime(), //** Voy a tener un id */\n//    title: 'Cumpleaños del jefe', //** Titulo que se va a mostrar */\n//    start: moment().toDate(), //** Cuando inicia el evento */\n//    end: moment().add( 2, 'hours' ).toDate(), //** Lo finalizamos a las 2 horas despues */\n//    bgcolor: '#fafafa', //** Esto solo es un background de la propiedad, es color azul */\n//    notes: 'Comprar el pastel', //** Esta es una nueva propiedad de las notas */\n//    user: { //** user, para saber quien creo el evento */\n//        _id: '123', //** Viene dentro del arreglo de user */\n//        name: 'Francisco'\n//    }\n// }\n\nconst initialState = { //** Va a ser un objeto */\n    events: [],\n    activeEvent: null //** Es un objeto, que tiene todas las propiedades del evento */\n}\n\nexport const calendarReducer = ( state = initialState, action ) => { //** Funcion que recibe el s=iS, y recibe el action, que son los types>types */\n    switch ( action.type ) { //** switch que recibe la action de types */\n\n        //** Lo que quiero que haga la accion */\n        case types.eventSetActive: //** Cuando se reciba esta accion */\n        return { //** Regresame una copia del state y quiero modificar el evento activo, que seria activeEvent */\n            ...state,\n            activeEvent: action.payload //** Y el activeEvent va a ser igual al action.payload */\n        }\n\n        case types.eventAddNew:\n            return {\n                ...state,\n                events: [\n                    ...state.events,\n                    action.payload\n                ]\n            }\n    \n        case types.eventClearActiveEvent:\n            return {\n                ...state,\n                activeEvent: null\n            }\n\n            case types.eventUpdated: //** Primero creo el tipo, luego recibo el state, luego creo el evento, y despues hago la accion */\n                return {\n                    ...state,\n                     events: state.events.map( //** Voy a necesitar un map, para buscar el evento voy a actualizar y actualizarlo */\n                        //** Condicion, lo ultimo es para que me mande el action.payload con toda la informacion actualizada */\n                        //** En caso contrario voy a regresar el e asi como esta */ */\n                        e => ( e.id === action.payload.id ) ? action.payload : e \n                        )\n                }\n\n            case types.eventDeleted:\n                return {\n                    ...state,\n                     events: state.events.filter( //** Con el filter quiero evitar regresar el que la persona esta borrando */\n                        //** El event.id debe ser diferente, pero como no tengo ningun action */\n                        //** Pero tengo la informacion en el state (para saber cual es el id de la nota activa) entonces pregunto */\n                        //** si el id de la nota que estoy evaluando es diferente al id de la nota que quiero eliminar que eso esta */\n                        e => ( e.id !== state.activeEvent.id ) //** en el state.activeEvent.id entonces si esto es asi se van a regresar */\n                        ),\n                        activeEvent: null //** Voy a quitar la nota activa */\n                    }\n\n            case types.eventLoaded:\n                return { //** Me retorna la copia del state, los eventos viene en el payload y asi los manejo */\n                    ...state,\n                    events: [ ...action.payload ] //** Voy a exparcir todos lo que venga en action.payload donde vienen los nuevos eventos */\n                }\n\n                case types.eventLogout: //** Evento para purgar el state */\n                    return {\n                        ...initialState //** Lo ponemos como en el estado inicial de la linea 18, desestructurcion para no mutarlo */\n                    }\n\n        default:\n            return state; //** Solo vamos a retornar el state */\n    }\n}","//** ________________________________________________________________________________________________________________________________________________ */\nimport { types } from \"../types/types\";\n\nconst initialState = {\n    modalOpen: false,\n}\n\nexport const uiReducer = ( state = initialState, action ) => {\n\n    switch ( action.type ) { //** Estos son los casos y va a ser lo que me regresa components>calendar>calendarScreen */\n        case types.uiOpenModal:\n            return {\n                ...state,\n                modalOpen: true\n            }\n\n        case types.uiCloseModal:\n            return {\n                ...state,\n                modalOpen: false\n            }\n    \n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport { authReducer } from './authReducer';\nimport { calendarReducer } from './calendarReducer';\n\nimport { uiReducer } from './uiReducer';\n\nexport const rootReducer = combineReducers({\n    ui: uiReducer,\n    calendar: calendarReducer, //** Con este tenemos nuestro nuevo state en el reducer */\n    auth: authReducer //** Importado desde reducers>authReducer, lo tengo Redux>State>auth>checking -Respuesta BD- */\n})","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\n\nimport { rootReducer } from '../reducers/rootReducer';\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(\n        applyMiddleware( thunk )\n    )\n);","// Este es un customHook que se va a encargar de los formularios\nimport { useState } from \"react\"\n\nexport const useForm = ( initialState = {} ) => { //** I.S. recibe un objeto con propiedades, que lleva un campo del formulario */\n    \n    const [values, setValues] = useState(initialState); //** Desestructuramos los valores, y lo que escribio el usuario */\n\n    const reset = () => { //** Borramos el formulario, despues de enviarse */\n        setValues( initialState ); //** Dejamos los campos vacios */\n    }\n\n    const handleInputChange = ({ target }) => { /** handleInputChange me permitirte leer el arreglo, del event voy a extraer el target */\n\n        setValues({\n            ...values, //** Para que se muestre */\n            [ target.name ]: target.value\n        });\n    }\n\n    /** Regresa como un arreglo, primer valor es estado del formulario, segundo es handleInputChange para cambiar los valores del formulario */\n    return [ values, handleInputChange, reset ]; //** El tercero borra todo */\n}","//**_______________________________________________________________________________________________________________________________________________*/\nconst baseUrl = process.env.REACT_APP_API_URL //** http://localhost:4000/api*/\n\n//** fetch sin token, osea va a ser un helper */\n\n//** endpoint=(auth o events), data=(email, password), method=get(solo si no manda nada el usuario) */\nconst fetchSinToken = ( endpoint, data, method = 'GET' ) => {\n\n    const url = `${ baseUrl }/${ endpoint }` //url=localhost:4000/api/ endpoint=auth/events\n\n    if ( method === 'GET' ) { //** Si el metodo es exactamente igual a GET entonces */\n        return fetch( url ) //** Hago el return de la peticion fetch, mandando el url, sin mas argumentos */\n    } else { //** Sino */\n        return fetch( url, { //** Hago el return de la peticion feth, con el url, pero ahora ya con */\n            method, //** Que pueden ser todos menos GET */\n            headers: { //** Lo encontramos en Postman, en Headers abajo que dice, pero tambien va el x-token */\n                'Content-type': 'application/json' //** Exactamente dice esto */\n            },\n            body: JSON.stringify( data ) //** stringify convierte la data=(email, password) en un JSON */\n        })\n    }\n}\n\nconst fetchConToken = ( endpoint, data, method = 'GET' ) => { //** Lo que recibe y su metodo GET */\n\n    const url = `${ baseUrl }/${ endpoint }` //url=localhost:4000/api/ endpoint=auth/events\n    const token = localStorage.getItem('token') || '' //** El token lo tengo en el localStorage, y de ahi lo le la linea 32 */\n\n    if ( method === 'GET' ) { //** Si el metodo es exactamente igual a GET entonces */\n        return fetch( url, { //** Hago el return de la peticion fetch, mandando el url, sin mas argumentos */\n            method, //** Ya lo tenemod definido linea 23 */\n            headers: { //** Mediante los headers voy a mandar el x-token */\n                'x-token': token //** Lo lee del localStorage linea 26 */\n            }\n        })\n    } else { //** Sino */\n        return fetch( url, { //** Hago el return de la peticion feth, con el url, pero ahora ya con los heders */\n            method, //** Que pueden ser todos menos GET */\n            headers: { //** Lo encontramos en Postman, en Headers abajo que dice, pero tambien va el x-token */\n                'Content-type': 'application/json', //** Exactamente dice esto */\n                'x-token': token //** Igual x-token del localStorage linea 26 */\n            },\n            body: JSON.stringify( data ) //** stringify convierte la data=(email, password) en un JSON */\n        })\n    }\n}\n\nexport { //** Lo exporto a actions>auth*/\n    fetchSinToken,\n    fetchConToken\n}","//**_______________________________________________________________________________________________________________________________________________*/\nimport moment from 'moment'\n\nexport const prepareEvents = ( events = [] ) => { //** Funcion que modifica los eventos, los recibe pero los igualamos a un objeto vacio */\n    \n    // console.log(events);\n    \n    return events.map( //** Regreso los eventos y recibo un array con los resultados */\n        (e) => ({ //** Recibo evento y regreso el nuevo objeto que forma parte del arreglo */\n            ...e, //** Va a tener todas las mismas propiedades */\n            end: moment( e.end ).toDate(), //** Modifico fechas, end sera instancia de moment mandando e.end y lo procesa con el .toDate */\n            start: moment( e.start ).toDate(),\n        })\n    )\n}","//**_______________________________________________________________________________________________________________________________________________*/\nimport Swal from \"sweetalert2\";\nimport { fetchConToken } from \"../helpers/fetch\";\nimport { prepareEvents } from \"../helpers/prepareEvents\";\nimport { types } from \"../types/types\";\n\n//** Accion que debe de llamar para inicializar el proceso de grabacion */\nexport const eventStartAddNew = ( event ) => { //** Recibo el evento que viene del formulario */\n    return async( dispatch, getState ) => { //** Asyncrona=Disparo mediante Tong y recibo el dispatch, getState es para conseguir info de Redux */\n        \n        // console.log(event); //** Para ver lo que tiene el event */\n        \n        const { uid, name } = getState().auth //** Extraigo del State, del auth, el uid y name */\n        \n        try {\n            //** resp viene de la configuracion de helpers>fetch, es una peticion y espero a que me sea resuelta */\n            const resp = await fetchConToken('events', event, 'POST') //** 1-Endpoint \"url\", 2-Payload a guardar body_abajo, 3-Tipo de Peticion */\n            const body = await resp.json() //** Body va a ser extraido de resp en formato json, osea String */\n    \n            // console.log(body); //** Si lo guarda en la base de datos y el body tiene todo */\n\n            if ( body.ok ) { //** Osea si se inserto en la base de datos */\n                event.id = body.evento.id //** Le hace falta el id */\n                event.user = { //** Hace falta el id que viene en el usuario, asi que lo desestructuramos */\n                    _id: uid,\n                    name: name\n                }\n                console.log(event); //** Para ver lo que tiene el event */\n                dispatch( eventAddNew( event ) ) //** Hago el dispatch de eventAddNew, me pide el event y le mando el de linea 6 */\n            }\n            \n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n}\n\n//** Evento agrega uno nuevo, recibe el evento, esta definido en el types>types y el payload es el evento, graba en BD */\nconst eventAddNew = (event) => ({  //** eventAddNew recibe el evento, lo cambio en components>calendar>CalendarModal */\n    type: types.eventAddNew, //** Este es el types, es lo que va a ser */\n    payload: event //** Payload es el evento que se recibio en la funcion */\n});\n\n//** Esto recibe el evento que quiero guardar, va a ser sincrono y el objeto que voy a retornar va a ser de types */\nexport const eventSetActive = (event) => ({ \n    type: types.eventSetActive,\n    payload: event\n});\n\n//** Lo encuentro en calendar>CalendarScreen */\nexport const eventClearActiveEvent = () => ({ type: types.eventClearActiveEvent })\n\nexport const eventStartUpdate = ( event ) => { //** Debo recibir el event */\n    return async( dispatch ) => { //** Async, necesito esperar unas tareas asyncronas, la disparo en components>calendar>CalendarModal */\n\n        try {\n            // console.log(event);\n            const resp = await fetchConToken(`events/${ event.id }`, event, 'PUT' ) //** eP a llamar, evento que voy a guardar y tipo de peticion */\n            const body = await resp.json() //** Extraigo el body */\n\n            if ( body.ok ) { //** Si tengo el body */\n                dispatch( eventUpdated( event ) ) //** Disparo evento que esta en la linea 72 y el argumento a mandar es el event de la linea 53 */\n            } else {\n                Swal.fire('Error', body.msg, 'error')\n            }\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\n//** Ahora voy a crear la accion, que defini en types */\nconst eventUpdated = ( event ) => ({ //** Recibo el evento a actualizar y voy a regresarlo ahi, osea voy a regresar un objeto */\n    type: types.eventUpdated,\n    payload: event //** El payload va a ser el event */\n});\n\nexport const eventStartDelete = ( event ) => { //** Necesito saber cual es el evento a borrar, lo extraigo abajo con el getState */\n    return async( dispatch, getState ) => { //** Aqui lo extrai */\n\n        const { id } = getState().calendar.activeEvent //** Desestructiro algo que viene del getState, calendar.activeEvent, de ahi saco el id */\n\n        console.log(id);\n\n        try {\n            const resp = await fetchConToken(`events/${ id }`, {}, 'DELETE') //** 1.eP, 2.lo del body, no mando nada, 3.Tipo Peticion */\n            const body = await resp.json()\n\n            if ( body.ok ) {\n                dispatch( eventDeleted() )\n            } else {\n                Swal.fire('Error', body.msg, 'error')\n            }\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nconst eventDeleted = () => ({ type: types.eventDeleted })\n\n//** Cuando se cargan los eventos del calendario */\nexport const eventStartLoading = () => { //** Va a obtener todos los eventos utilizando el endpoint */\n    return async( dispatch ) => { //** Funcion asyncrona */\n\n        // console.log(\"...\");\n        //** Voy a hacer la peticion de los getEvents */\n        try {\n            \n            const resp = await fetchConToken( 'events' ) //** eP son los events, por ser peticion GET no manda nada mas */\n            const body = await resp.json() //** Cuerpo va a ser en formato JSON */\n\n            //** Constante events, igaual a pE que va a ser lo que viene en el body.events helpers>prepareEvents */\n            const events = prepareEvents( body.eventos )\n            \n            // console.log(body); //** Asi muestro los eventos en consola */\n            // console.log(events); //** Para ver que si tengo los eventos en consola */\n            \n            dispatch( eventLoaded( events ) )//** Llamo el dispatch de los eL mandando los eventos, para que los tenga en el store */\n\n        } catch (error) {\n            console.log(error);\n            \n        }\n    }\n}\n\n//** Accion que voy a disparar al reducer, solo trabajara aqui, al hacerla la configuro en el reducer */\nconst eventLoaded = ( event ) => ({ //** Recibo los eventos, va a retornar un objeto y payload son los eventos */\n    type: types.eventLoaded,\n    payload: event\n}) \n\nexport const eventLogout = () => ({ //** retorno un objeto que va a ser type: types.eventLogout */\n    type: types.eventLogout\n}) ","//**_______________________________________________________________________________________________________________________________________________*/\nimport { fetchConToken, fetchSinToken } from \"../helpers/fetch\"\nimport { types } from \"../types/types\"\nimport Swal from 'sweetalert2' //** Para las alertas */\nimport { eventLogout } from \"./events\"\n\n//** Funcion que comienza proceso de autentificacion */\nexport const startLogin = ( email, password ) => { //** Exporto(mando) la funcion que va a ser asyncrona, recibe email, password */\n    return async( dispatch ) => { //** Por el thunk se va a volver a disparar */\n        \n        // console.log(email, password); //** Para mostrarlo en consola pero desde aqui */\n\n        //** endpoint=auth, recibe la data(desestructurada), y luego el metodo que es POST */\n        const resp = await fetchSinToken( 'auth', { email, password }, 'POST' ) \n        const body = await resp.json() //** Es igual a los parametros del resp=(name/ok/token/uid) como un json(es el msg/ok) */\n\n        // console.log(body);\n\n        if( body.ok ) { //** Si tenemos el ok, osea para saber si hizo la conexion */\n            localStorage.setItem( 'token', body.token ) //** Voy a guardar en localStorage el token que lo tengo en el body */\n            localStorage.setItem( 'token-init-date', new Date().getTime() ) //** token-init-date para saber la fecha de cuando se creo */\n\n            dispatch( login({ //** Hago el dispatch de la info Consola>Redux>state>auth linea 29 */\n                uid: body.uid, //** Mando el login y recibo un objeto con el uid y el name que vienen en el body */\n                name: body.name //** Establece el uid y el name en el store */\n            }) )\n        } else { //** Si escribe mal la contraseña o el usuario */\n            Swal.fire('Error', body.msg, 'error') //** Primero lo que dice, segundo el msg que tengo en la base de datos, tercero tachita */\n        }\n    }\n}\n\n//** Funcion starRegister, solo necesitamos name, email, password */\nexport const startRegister = ( email, password, name ) => { //** Esta funcion la exporte en components>auth>LoginScreen */\n    return async( dispatch ) => { //** Funcion Asyncrona, y el dispatch para poder disparar alguna accion, cuando tenga el usuario */\n\n        const resp = await fetchSinToken( 'auth/new', { email, password, name }, 'POST' ) //** endPoint, variables que mandamos y methodo */\n        const body = await resp.json() //** Respuesta se manda por el body>raw,>JSON, porque es el objeto con los parametros, name/ok/token/uid) */\n\n        if( body.ok ) { //** Si el body esta entonces */\n            localStorage.setItem( 'token', body.token ) //** Guardamos lo que manda en el body.token */\n            localStorage.setItem( 'token-init-date', new Date().getTime() ) //** Guardamos el valor de creacion de a variable */\n\n            dispatch( login({ //** Hacemos el dispatch del login */\n                uid: body.uid, //** Estos son los parametros del login */\n                name: body.name\n            }) )\n        } else { //** Sino tenemos el error */\n            Swal.fire('Error', body.msg, 'error')\n        }\n    }\n}\n\nexport const startChecking = () => { //** No requiere argumentos */\n    return async( dispatch ) => { //** Retorno el dispatch y va a ser una tarea async */\n\n        const resp = await fetchConToken( 'auth/renew' ) //** endPoint, no necesita ningun argumento y es un GET */\n        const body = await resp.json() //** Respuesta se manda al body>raw,>JSON, porque en json tengo nuevo token */\n\n        // console.log(body); //** Para ver la impresion en consola del body, para ver si mandamos bien los parametros */\n\n        if( body.ok ) { //** Si el body tiene el ok entonces */\n            localStorage.setItem( 'token', body.token ) //** Guardamos lo que manda en el body.token, en localStorage variable body */\n            localStorage.setItem( 'token-init-date', new Date().getTime() ) //** Guardamos el valor de creacion de a variable (tiempo) */\n\n            dispatch( login({ //** Hacemos el dispatch del login */\n                uid: body.uid, //** Estos son los parametros del login, que establecen la informacion */\n                name: body.name\n            }) )\n        } else { //** Sino tenemos el error */\n            dispatch( checkingFinish() ) //** De types>types, accion para confirmar que se hizo la autentificacion si/no, de linea 76 */\n        }\n    }\n}\n\nconst checkingFinish = () => ({ type: types.authCheckingFinish }) //** Constante que no recibe nada, retorna un objeto de types, en linea 70 */\n\n//** Accion sincrona, y solo la voy a usar aqui */\nconst login = ( user ) => ({ //** Recibo el user */\n    type: types.authLogin, //** Viene de types>types que es para saber que ya se logeo el usuario */\n    payload: user //** Payload es lo que se carga del usuario y si no hay nada puede omitirlo */  \n})\n\n//** Acciones para salir */\nexport const startLogout = () => { //** Funcion, para salir, que la llamo desde el dispatch del components>ui>Navbar */\n    return( dispatch ) => { //** Va a tener una accion a disparar */\n\n        localStorage.clear() //** Hago limpieza en el LS y me saca */\n        dispatch( eventLogout() ) //** Aqui disparo llamar la ultima funcion creada para purgar */\n        dispatch( logout() ) //** Accion se dispara, limpiar el state, dejando checking en false, eliminando uid y name, llama funcion logout() */\n    }\n}\n\nconst logout = () => ({ type: types.authLogout }) //** Funcion logout que retorna un objeto que tiene el types y limpia el store */","import React from 'react';\nimport { useDispatch } from 'react-redux'\nimport { useForm } from '../../hooks/useForm';\nimport { startLogin, startRegister } from '../../actions/auth';\nimport Swal from 'sweetalert2';\n\nimport './login.css'; //** Esto es porque importamos info desde nuestro css */\n\nexport const LoginScreen = () => { //** Esto es porque lo exportamos al archivo de routes>AppRouter */\n\n    const dispatch = useDispatch() //** Hay que hacer el dispatch para la funcion startLogin de actions>auth */\n\n    const [ formLoginValues, handleLoginInputChange ] = useForm({ //** Es de hooks>useForm, cambiamos nombres, porque tendre 2 forms */\n        lEmail: 'francisco@mail.com', //** La \"l\", es porque viene del login */\n        lPassword: '123456' //** Es un usuario real de Postman */\n    });\n\n    const { lEmail, lPassword } = formLoginValues; //** Voy a extraer estas dos variables, vienen de formLoginValues */\n\n    const handleLogin = ( e ) => { //** Linea 32, funcion que se hace al hacer click */\n        e.preventDefault() //** Para que no recarge la pagina */\n        \n        // console.log(formLoginValues); //** Para ver lo que trae el formulario al hacer click en login */\n        dispatch( startLogin( lEmail, lPassword )  ) //** Aqui voy a disparar startLogin, recibe email y password de actions>auth */\n    }\n\n    //** Manejador de Registro, parecido al de login */\n    //** formRegisterValues son los campos del formulario de registro, handleRegisterInputChange los valores asignados ya en el formulario */\n    const [ formRegisterValues, handleRegisterInputChange ] = useForm({ //** Son los del formRegisterValues, handleRegisterInputChange del useForm */\n        rName: 'Frank', //** Estos son los campos */\n        rEmail: 'frank@mail.com', //** La \"r\", es porque viene del login */\n        rPassword1: '123456', //** Es un nuevo registro, bueno este es el password */\n        rPassword2: '123456' //** La confirmacion del password */\n    });\n\n    const { rName, rEmail, rPassword1, rPassword2 } = formRegisterValues //** Desestructuramos loa valores del fRV y esos campos tiene */\n\n    const handleRegister = ( e ) => { //** handleRegister es una funcion que recibe el evento, asignado en el onSubmit */\n        e.preventDefault() //** Para evitar que se recargue el navegador */\n\n        if ( rPassword1 !== rPassword2 ) { //** Si rP1 es Diferente a rP2 */\n            return Swal.fire('Error', 'Las Contraseñas deben de ser Iguales', 'error') //** Mandamos el error con Swal */\n        }\n        // console.log('Se Dispara'); //** Para saber si se esta disparando */\n        dispatch( startRegister( rEmail, rPassword1, rName ) ) //** Ok validacion, haz el dispatch, pide los 3 argumentos, viene de actions>auth */\n    }\n\n    return (\n        //** Container no abarca todo el espacio de la pantalla, login-container(clase) */\n        <div className=\"container login-container\">\n            <div className=\"row\"> {/* Ingreso y Registro misma fila */}\n                {/* El col-md-6 nos dice lo que va a medir el formulario de ingreso y lo demas es la clase que ya definimos */}\n                <div className=\"col-md-6 login-form-1\">\n                    <h3>Ingreso</h3> {/* Titulo de arriba */}\n                    <form onSubmit={ handleLogin }> {/* Que va a ser un formulario, y el onSubmit va a tener un metodo */}\n                        <div className=\"form-group\"> {/* Es un formulario en grupo, osea aqui el correo, pero solo va correo */}\n                            <input //** Aqui va la info que va por el formulario */\n                                type=\"text\" //** Tipo de campo */\n                                className=\"form-control\" //** Es el espacio, donde va el texto, (clase_Bootstrap) */\n                                placeholder=\"Correo\" //** Lo que viene en gris dentro de la caja */\n                                name=\"lEmail\" //** Es el nombre del Campo */\n                                value={ lEmail } //** El valor va a ser el lEmail que recibi, desestructurado y esta en useForm */\n                                onChange={ handleLoginInputChange } //** Esta es cuando se hacen los cambios */\n                            />\n                        </div>\n                        <div className=\"form-group\"> {/* Creamos otro formulario pero solo con lo del password */}\n                            <input\n                                type=\"password\" //** Para que se vean estrellitas */\n                                className=\"form-control\"\n                                placeholder=\"Contraseña\"\n                                name=\"lPassword\" //** Aqui recibo el Password que recibe el useForm */\n                                value={ lPassword } //** Lo que viene en el lPassword, el que recibi y esta en useForm */\n                                onChange={ handleLoginInputChange } //** Esta es cuando se hacen los cambios, en useForm y ahi se guardan */\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input \n                                type=\"submit\" //** Esto significa que se puede hacer click */\n                                className=\"btnSubmit\" /* btnSubmit(clase bootstrap) */\n                                value=\"Login\" //** Lo que dice el Boton */\n                            />\n                        </div>\n                    </form>\n                </div>\n\n                <div className=\"col-md-6 login-form-2\"> {/* col-md-x= ancho container bootstrap (max_12)-login-form-2(clase_auth>login) */}\n                    <h3>Registro</h3>\n                    <form onSubmit={ handleRegister }> {/* Formulario y el metodo handleRegister es lo que se manda cuando hacemos click */}\n                        <div className=\"form-group\"> {/* Son las cajitas de texto */}\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Nombre\"\n                                name=\"rName\" //** Nombre del campo */\n                                value={ rName } //** Este es el valor que va a tener ese campo, desestructurado */\n                                onChange={ handleRegisterInputChange } //** Es donde se va a quedar los cambios, ahi se quedan */\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"email\"\n                                className=\"form-control\"\n                                placeholder=\"Correo\"\n                                name=\"rEmail\"\n                                value={ rEmail }\n                                onChange={ handleRegisterInputChange }\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Contraseña\"\n                                name=\"rPassword1\"\n                                value={ rPassword1 }\n                                onChange={ handleRegisterInputChange }\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Repita la contraseña\"\n                                name=\"rPassword2\"\n                                value={ rPassword2 }\n                                onChange={ handleRegisterInputChange }\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <input\n                                type=\"submit\"\n                                className=\"btnSubmit\"\n                                value=\"Crear cuenta\"\n                            />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}","//**_______________________________________________________________________________________________________________________________________________*/\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { startLogout } from '../../actions/auth'\n\nexport const Navbar = () => {\n\n    const dispatch = useDispatch()\n    const { name } = useSelector( state => state.auth ) //** Desestructuramos el name del state */\n\n    const handleLogout = () => { //** Funcion que no recibe argumentos y hace el dispatch del logout */\n        dispatch( startLogout() ) //** Funcion esta en actions>auth y hace las acciones ahi definidas */\n        // console.log('click'); //** Asi confirmo que este funcionando el boton */\n    }\n\n    return (\n        <div className=\"navbar navbar-dark bg-dark mb-4\"> {/* Esto es el navbar, con estilos */}\n            <span className=\"navbar-brand\">\n                { name } {/* Con useSelector, va arriba del state sacamos el nombre y lo mostramos */}\n            </span>\n\n            <button\n                className=\"btn btn-outline-danger\" /* btn(bootstrap), outline dibujado por fuera, danger color rojo */\n                onClick={ handleLogout } //** Al hacer click llamo a este metodo */\n                >\n            <i className=\"fas fa-sign-out-alt\"></i> {/* i=icon, Puerta de salida FA */}\n                <span> Salir</span>\n            </button>\n        </div>\n    )\n}\n","export const messages = { //** Este es un objeto, que voy a exportar para tener la App en español */\n    allDay: 'Todo el día',\n    previous: '<',\n    next: '>',\n    today: 'Hoy',\n    month: 'Mes',\n    week: 'Semana',\n    day: 'Día',\n    agenda: 'Agenda',\n    date: 'Fecha',\n    time: 'Hora',\n    event: 'Evento',\n    noEventsInRange: 'No hay eventos en este rango',\n    showMore: total => `+ Ver más (${total})`\n};","//** Este va a ser un componente que va a recibir todo el evento */\n\nimport React from 'react'\n\nexport const CalendarEvent = ({ event }) => { //** Osea que recibe toda la informacion del evento */\n    \n    const { title, user } = event; //** Voy a tomar el arreglo del titulo, pero para eso solo lo voy a desestructurar, como en el calendarScreen, cree el user y le paso los arreglos, en el user.name */\n\n    return (\n        <div>\n            <strong> { title } </strong>\n            <span>- { user.name } </span> {/* Con esto voy a saber quien lo creo */}\n        </div>\n    )\n}\n","import { types } from \"../types/types\";\n\n//** Este esta en types>types */\nexport const uiOpenModal = () => ({ type: types.uiOpenModal }); //** Solo va a regresar un objeto */\nexport const uiCloseModal = () => ({ type: types.uiCloseModal }); //** Solo va a regresar un objeto */","//**_______________________________________________________________________________________________________________________________________________*/\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux' //** Este lo importo para que este pendiente de algo */\n\nimport moment from 'moment'\nimport Modal from 'react-modal'; //** Un modal es la ventana donde puedo poner acciones secundarias */\nimport DateTimePicker from 'react-datetime-picker'; //** Esta es una importacion para el tiempo, para hacerlo mas facil */\nimport Swal from 'sweetalert2'; //** Para el sweet alert le hacemos \"npm i sweetalert2\" */\n\nimport { uiCloseModal } from '../../actions/ui';\nimport { eventClearActiveEvent, eventStartAddNew, eventStartUpdate } from '../../actions/events';\n\nconst customStyles = {\n    content : {\n      top                   : '50%',\n      left                  : '50%',\n      right                 : 'auto',\n      bottom                : 'auto',\n      marginRight           : '-50%',\n      transform             : 'translate(-50%, -50%)'\n    }\n};\nModal.setAppElement('#root');\n\nconst now = moment().minutes(0).seconds(0).add(1,'hours'); //** Definir valor inicial en moment, momento actual, seg/min en 0 */\nconst nowPlus1 = now.clone().add(1, 'hours'); //** Este va a ser una hora superior, para el campo del fin */\n\nconst initEvent = { //** Este va a ser igual al objeto */\n\n    title: '',\n    notes: '',\n    start: now.toDate(),\n    end: nowPlus1.toDate() \n}\n\nexport const CalendarModal = () => {\n\n    //** Para estar al pendiente, lo voy a desestructurar para que este en el isOpen del return */\n    const { modalOpen } = useSelector( state => state.ui );\n    const { activeEvent } = useSelector( state => state.calendar ); //** Para estar al pendiente del calendar, dentro tengo el activeEvent /*\n    const dispatch = useDispatch();\n\n    const [titleValid, setTitleValid] = useState(true)\n    const [ dateStart, setDateStart ] = useState( now.toDate() ); //** Utilizamos este estado para que lo haga con la fecha actual */\n    const [ dateEnd, setDateEnd ] = useState( nowPlus1.toDate() );\n\n    const [formValues, setFormValues] = useState( initEvent ) //** Este va a ser el estado inicial del formulario */)\n\n    const { notes, title, start, end } = formValues; //** Extraigo las notes y title del formValues, luego extraigo el start y el end */\n\n    useEffect(() => { //** Necesita estar pendiente del activeEvent */\n        if ( activeEvent ) { //** Si existe quiero llamar el setFormValues y mandarle el activeEvent */\n            setFormValues( activeEvent )\n        } else {\n            setFormValues( initEvent )\n        }\n        //** Es una dependencia del useEffect, al igual que el setFormValues y si uno cambia va a volver a iniciar este codigo */\n    }, [activeEvent, setFormValues])\n\n    const handleInputChange = ({ target }) => { //** Aqui voy a recibir el evento, pero solo va a ser el target */\n        setFormValues({ //** Nuevo objeto que tiene los valores del formValues, se va a cambiar el se esta recibiendo en este evento */\n            ...formValues,\n            [target.name]: target.value //** Voy a computar el nombre de la propiedad luego viene el target.value como valor de esta propiedad */\n        });\n    }\n\n    const closeModal = () => { //** Con este cerramos la ventana del modal */\n        // TODO: cerrar el modal\n        dispatch( uiCloseModal() )\n        dispatch( eventClearActiveEvent() )\n        setFormValues( initEvent )\n    }\n\n    const handleStartDateChange = ( e ) => { //** Aqui voy a recibir un evento y este sera la fecha */\n        setDateStart( e );\n        setFormValues({ //** Voy a hacer la desestructuracion del formValues, y el start va a ser el evento que recibe */\n            ...formValues,\n            start: e\n        })\n    }\n\n    const handleEndDateChange = ( e ) => { //** Aqui voy a recibir un evento y este sera la fecha */\n        setDateEnd( e );\n        setFormValues({ //** Voy a hacer la desestructuracion del formValues, y el start va a ser el evento que recibe */\n            ...formValues,\n            end: e\n        })\n    }\n\n    const handleSubmitForm = (e) => { //** Aqui recibo el evento, y este es cuando le den al boton de guardar */\n        e.preventDefault(); //** Para evitar la propagacion del formulario */\n\n        const momentStart = moment( start )\n        const momentEnd = moment( end )\n\n        if ( momentStart.isSameOrAfter( momentEnd ) ) { //** Fecha de inicio despues de la fecha de inicializacion no lo voy a dejar pasar */\n            return Swal.fire('Error','La fecha fin debe de ser mayor a la fecha de inicio', 'error'); //** Mensaje error */\n        }\n\n        if (title.trim().length < 2 ) { //** Esto es para evitar que el titulo tenga menos de 2 letras */\n            return setTitleValid(false);\n        }\n\n        //** Si existe el evento, se dispara el eventStartUpdate, se manda en el nuevo evento, que es lo que tengamos en nuestros formValues */\n        if ( activeEvent ) { \n            dispatch ( eventStartUpdate( formValues ) )\n        } else { //** En caso contrario disparamos la accion que ya teniamos antes */\n        dispatch( eventStartAddNew( formValues ) ) //** El evento disparado esta en events>events, recibo el formulario */\n        }\n\n        setTitleValid(true)\n        closeModal();\n    } \n\n    return (\n            <Modal\n            isOpen={ modalOpen }\n            onRequestClose={ closeModal }\n            style={ customStyles }\n            closeTimeoutMS={ 200 }\n            className=\"modal\"\n            overlayClassName=\"modal-fondo\"\n            >\n                <h1> { (activeEvent)? 'Editar Evento': 'Nuevo Evento'} </h1>\n                <hr />\n                <form \n                    className=\"container\"\n                    onSubmit={ handleSubmitForm }\n                >\n\n                    <div className=\"form-group\">\n                        <label>Fecha y hora inicio</label>\n                        <DateTimePicker\n                            onChange={ handleStartDateChange } //** Esto es que cambio la fecha de inicio y despues toca definirlo */\n                            value={ dateStart } \n                            className=\"form-control\"\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Fecha y hora fin</label>\n                        <DateTimePicker\n                            onChange={ handleEndDateChange } //** Para esto me toca crear el metodo */\n                            value={ dateEnd } \n                            minDate={ dateStart }\n                            className=\"form-control\"\n                        />\n                    </div>\n\n                    <hr />\n                    <div className=\"form-group\">\n                        <label>Titulo y notas</label>\n                        <input \n                            type=\"text\" \n                            className={ `form-control ${ !titleValid && 'is-invalid' } `}\n                            placeholder=\"Título del evento\"\n                            name=\"title\"\n                            autoComplete=\"off\"\n                            value={ title } //** El valor del titulo y notas es el title que asignamos arriba en la variable del formValues */\n                            onChange={ handleInputChange }\n                        />\n                        <small id=\"emailHelp\" className=\"form-text text-muted\">Una descripción corta</small>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <textarea \n                            type=\"text\" \n                            className=\"form-control\"\n                            placeholder=\"Notas\"\n                            rows=\"5\"\n                            name=\"notes\"\n                            value={ notes } //** El valor en notas va a ser el que asignamos arriba en la variable del formValues */\n                            onChange={ handleInputChange }\n                        ></textarea>\n                        <small id=\"emailHelp\" className=\"form-text text-muted\">Información adicional</small>\n                    </div>\n\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-outline-primary btn-block\"\n                    >\n                        <i className=\"far fa-save\"></i>\n                        <span> Guardar</span>\n                    </button>\n\n                </form>\n\n        </Modal>\n    )\n}","//** ________________________________________________________________________________________________________________________________________________ */\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { uiOpenModal } from '../../actions/ui';\n\nexport const AddNewFab = () => {\n\n    const dispatch = useDispatch();\n\n    const handleClickNew = () => { //** No recibo ningun argumento */\n        dispatch( uiOpenModal() ) //** Y el Dispatch solo va a ser el uiOpenModal reducers>uiReducer */\n    }\n\n    return (\n        <button\n            className=\"btn btn-primary fab\"\n            onClick={ handleClickNew }//** Asocio el metodo en el onClick */\n        >\n            <i className=\"fas fa-plus\"></i>\n        </button>\n    )\n}\n","//**_______________________________________________________________________________________________________________________________________________*/\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { eventStartDelete } from '../../actions/events';\n\nexport const DeleteEventFab = () => {\n\n    const dispatch = useDispatch();\n\n    const handleDelete = () => {\n        dispatch( eventStartDelete() ) //** Esta la hicimos en los events y borramos la pasada, que la dejamos local */\n    }\n\n    return (\n        <button\n            className=\"btn btn-danger fab-danger\"\n            onClick={ handleDelete }\n        >\n            <i className=\"fas fa-trash\"></i>\n            <span> Borrar Evento </span>\n        </button>\n    )\n}\n","//** ________________________________________________________________________________________________________________________________________________ */\nimport React, { useState } from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar'; //** Hice estas dos importaciones */\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'; //** De las que dije */\n\nimport { Navbar } from '../ui/Navbar';\nimport { messages } from '../../helpers/calendar-messages-es'; //** Importacion de messages, ahi esta la configuracion del español */\nimport { CalendarEvent } from './CalendarEvent'; //** Este lo importamos por el componente en el event */\nimport { CalendarModal } from './CalendarModal';\n\nimport { uiOpenModal } from '../../actions/ui';\n\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'moment/locale/es';\nimport { eventClearActiveEvent, eventSetActive, eventStartLoading } from '../../actions/events';\nimport { AddNewFab } from '../ui/AddNewFab';\nimport { DeleteEventFab } from '../ui/DeleteEventFab';\nimport { useEffect } from 'react';\n\nmoment.locale('es'); //** Esto es para cambiarle el texto al español */\n\nconst localizer = momentLocalizer(moment); //** Esto lo copie, y simplemente lo puse despues de las importaciones */\n\nexport const CalendarScreen = () => {\n\n    const dispatch = useDispatch(); //** Asi no tengo que importar nada mas, solo resta hacer el dispatch de la respectiva accion */\n    const { events, activeEvent } = useSelector( state => state.calendar ) //** Primero voy a extraer los events del state del calendario */\n    const { uid } = useSelector( state => state.auth ) //** Leo el uid del state.auth */\n\n    //** lastView almacena la ultima vista, el setLastView actualiza el estado del componente, useState le digo cual va a ser su estado inicial */\n    const [lastView, setLastView] = useState( localStorage.getItem('lastView') || 'month' ); //** gI es para ver lo que tiene, ultima vista o mes */\n\n    useEffect(() => { //** Lo voy a ejecutar 1 vez */\n\n        dispatch( eventStartLoading() ) //** Disparo eSL, no necesita argumento porque solo ocupa el token */\n    }, [ dispatch ]) //** Unica dependencia que tiene es el dispatch, aunque nunca va a cambiar */\n\n    const onDoubleClick = (e) => { //** Esta es para mostrar los eventos al hacer dobleClick */\n        // console.log(e);\n        dispatch( uiOpenModal() ) //** No recibe ningun argumento */\n    }\n\n    const onSelectEvent = (e) => { //** Al hacer click se dispare el evento */\n        dispatch( eventSetActive( e ) ) //** Hacemos el dispatch de un evento, y el evento es e, pero falta ponerle accion en el calendarReducer */\n    }\n\n    const onViewChange = (e) => { //** Para que al hacer el cambio de la vista salga el tipo de formato que es, de dia, semana etc */\n        setLastView(e); //** Es para que se quede en la ultima vista */\n        localStorage.setItem('lastView', e); //** Esto es para ver el ultimo tipo de vista */\n    }\n\n    const onSelectSlot = (e) => {\n        // console.log(e);\n        dispatch( eventClearActiveEvent() )\n    }\n\n    const eventStyleGetter = ( event, start, end, isSelected ) => { //** Esta funcion se va a disparar con el event, start, end, isSelected */\n        \n        // console.log(event); //** Mostramos el evento */\n\n        const style = { //** Este va a ser un objeto que va a tener las propiedades de aqui abajo */\n            //** Voy a preguntar mediante un ternario para que el background cambie de color */\n            //** Si el uid es exactamente igual al event.user.id voy a colocar el color azul, pero en caso contarrio pongo el gris */\n            backgroundColor: ( uid === event.user._id ) ? '#367CF7' : '#465660',\n            borderRadius: '0px',\n            opacity: 0.8,\n            display: 'block',\n            color: 'white'\n        }\n\n        return {\n            style\n        }\n    }\n\n    return (\n        <div className=\"calendar-screen\"> {/* Aqui le voy a poner un nuevo estilo por eso hago una nueva clase */}\n            <Navbar />\n\n            <Calendar\n                localizer={ localizer } //** Esto lo copiamos de arriba */\n                events={ events } //** Esos eventos son los que voy a mandar aqui, los que puse en la linea 10 */\n                startAccessor=\"start\"\n                endAccessor=\"end\"\n                messages={ messages } //** Esto lo voy a mandar al messages */\n                eventPropGetter={ eventStyleGetter } //** Estos son disparados por este calendario, y aqui solo estoy pasando la referencia */\n                onDoubleClickEvent={ onDoubleClick } //** Es para tener informacion al hacer dobleClick */\n                onSelectEvent={ onSelectEvent } //** Es para que al hacer click se dispare el evento */\n                onView={ onViewChange } //** Tipo de vista en la cual estamos viendolo */\n                onSelectSlot={ onSelectSlot }\n                selectable={ true }\n                view={ lastView || 'month' } //** Es la vista que va a tener */\n                components={{ //** Con esta propiedad puedo mostrar todo */\n                    event: CalendarEvent //** CalendarEvent es el componente, no se renderizar, solamente se manda como referencia */\n                }}\n            />\n\n            <AddNewFab />\n\n            {\n                (activeEvent) && <DeleteEventFab />\n            }\n\n            <CalendarModal /> {/* Este componente lo acabo de crear y lo importe */}\n\n        </div>\n    )\n}","//**_______________________________________________________________________________________________________________________________________________*/\n//** Copio el codigo de la ruta privada */\n\n//** Este FC va a tener un comportamiento especial */\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; //** Importo los PropTypes, necesito el isAutenticated como booleano  */\n\nimport { Redirect, Route } from 'react-router-dom'\n\nexport const PublicRoute = ({ //** Voy a recibir varios elementos en los props, para saber si esta autentificado */\n    isAutenticated,\n    component:Component, //** Necesito el component(renombro con \":\"\" es Component por \"C\"-Mayuscula) de la persona que quiera entrar */\n    ...rest //** Los argumentos los voy a almacenar en la variable ...rest, para mandarlos al component */\n}) => {\n\n    return (\n        <Route { ...rest } //** Ruta va a tener el resto de propiedades que estoy recibiendo en el ...rest linea 12 */\n            component={ (props) => ( //** component recibe las props(history/location/params), pero retorno con () y es el isAutenticated */\n                ( isAutenticated ) //** Evaluo si esta autentificado \"Operador Ternario\" */\n                ? ( <Redirect to=\"/\" /> ) //** Lo mando directamente al calendar en la ruta publica */\n                : ( <Component { ...props } /> ) //** Si no esta autentifiado, regreso el Component con las props pero desestructuradas */\n            )}\n        />\n    )\n}\n\n// Para utilizar el PrivateRoute lo vamos a implementar en el AppRouter para proteger el { DashboardRoutes }\n//** PublicRoute */\nPublicRoute.propTypes = {\n    isAutenticated: PropTypes.bool.isRequired, //** Asi le decimos que es booleano y que es Requerido */\n    component: PropTypes.func.isRequired //** Va a ser una funcion, igual requerida */\n}","//**_______________________________________________________________________________________________________________________________________________*/\n//** Este FC va a tener un comportamiento especial */\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; //** Importo los PropTypes, necesito el isAutenticated como booleano  */\n\nimport { Redirect, Route } from 'react-router-dom'\n\nexport const PrivateRoute = ({ //** Voy a recibir varios elementos en los props, para saber si esta autentificado */\n    isAutenticated,\n    component:Component, //** Necesito el component(renombro con \":\"\" es Component por \"C\"-Mayuscula) de la persona que quiera entrar */\n    ...rest //** Los argumentos los voy a almacenar en la variable ...rest, para mandarlos al component */\n}) => {\n\n    return (\n        <Route { ...rest } //** Ruta va a tener el resto de propiedades que estoy recibiendo en el ...rest linea 12 */\n            component={ (props) => ( //** component recibe las props(history/location/params), pero retorno con () y es el isAutenticated */\n                ( isAutenticated ) //** Evaluo si esta autentificado \"Operador Ternario\" */\n                ? ( <Component { ...props } /> ) //** Regresame el Component, pero con las props desestructuradas, y entra */\n                : ( <Redirect to=\"/login\" /> ) //** Si no esta autentificado redireccionalo al login */\n            )}\n        />\n    )\n}\n\n// Para utilizar el PrivateRoute lo vamos a implementar en el AppRouter para proteger el { DashboardRoutes }\n//** PrivateRoute */\nPrivateRoute.propTypes = {\n    isAutenticated: PropTypes.bool.isRequired, //** Asi le decimos que es booleano y que es Requerido */\n    component: PropTypes.func.isRequired //** Va a ser una funcion, igual requerida */\n}\n","//**_______________________________________________________________________________________________________________________________________________*/\n\nimport React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Redirect\n} from 'react-router-dom';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { LoginScreen } from '../components/auth/LoginScreen';\nimport { CalendarScreen } from '../components/calendar/CalendarScreen';\nimport { useEffect } from 'react';\nimport { startChecking } from '../actions/auth';\nimport { PublicRoute } from './PublicRoute';\nimport { PrivateRoute } from './PrivateRoute';\n\nexport const AppRouter = () => {\n\n    const dispatch = useDispatch() //** Lanzo el dispatch cuando entren a la app, checking=false (ya termino la autentificion) */\n\n    //** Para leer del store la propiedad checking */\n    const { checking, uid } = useSelector(state => state.auth) //** Estar pendiente del auth, desestructuro el checking y auth */\n\n    useEffect(() => { //** Es para ponerme al tiro de los cambios, aqui lo pusimos porque era importante */\n        \n        dispatch( startChecking() ) //** Esta pendiente del startChecking de types>typess, cuendo entres te avisa token */\n    }, [ dispatch ]) //** Lanzame el dispatch de la accion */\n\n    // console.log(checking); //** Al princioio en true, luego se pasa a false */\n\n    //** No quiero mostrar nada hasta que el checking este en false */\n    if( checking ) { //** Si estoy cargando voy a hacer un retorno del componente, voy a poner un h5 */\n        return <h5>Espere...</h5>\n    }\n\n    return (\n        <Router>\n            <div>\n                <Switch> {/* Cuando cambia el UID todo esto se vuelve a mandar y cambia todo */}\n                    <PublicRoute /* Ruta publica con el componente que quiero mostrar */\n                    exact path=\"/login\"\n                    component={ LoginScreen }\n                    //** !!uid asi paso un string a un valor booleano, si tengo info es true, con ! es false !null true, !!null false*/\n                    isAutenticated={ !!uid } //** Necesito un valor booleano para saber si esta autentificado y necesito el uid */\n                    />\n\n                    <PrivateRoute /* Si esta autentificado mandar al CalendarScreen */\n                        exact\n                        path=\"/\"\n                        component={ CalendarScreen }\n                        isAutenticated={ !!uid }\n                        />\n\n                    <Redirect to=\"/\" />{/* Este lo uso para redireccionar al / */}\n                </Switch>\n            </div>\n        </Router>\n    )\n}","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store/store';\nimport { AppRouter } from './router/AppRouter'\n\nexport const CalendarApp = () => {\n    return (\n        <Provider store={ store }>\n            <AppRouter />\n        </Provider>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CalendarApp } from './CalendarApp';\n\nimport './styles.css'; //** La importacion por default */\n\n// console.log(process.env); //** Para ver si estoy en developer & production */\n\nReactDOM.render(\n    <CalendarApp />, //** Recuerda cambiarle el nombre del archivo que vamos a llamar, y recuerda importarlo */\n  document.getElementById('root')\n);\n"],"sourceRoot":""}